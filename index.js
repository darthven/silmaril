!function(e){var t={};function s(i){if(t[i])return t[i].exports;var d=t[i]={i,l:!1,exports:{}};return e[i].call(d.exports,d,d.exports,s),d.l=!0,d.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class i{constructor(e,t,s){this._value=e,this._depth=t,this._index=s,this._children=[]}}t.default=class{constructor(){this._levels=new Map}get root(){return this._root}get levels(){return this._levels}getLevelNodes(e){return this._levels.get(e)}getNode(e,t){return this.getLevelNodes(e).find(e=>e._index===t)}addNode(e,t,s){if(t>=0&&s>=0){const i=this.getNode(t,s);this.addNewNode(e,i)}else this.addNewNode(e)}addNodes(e,t,s){e.forEach(e=>this.addNode(e,t,s))}removeNode(e,t){const s=this.getNode(e,t);if(s)if(this._root===s)this._root=null,this._levels=new Map;else{const i=this.getLevelNodes(e-1).find(e=>e._children.includes(s));i&&i._children&&i._children[t]&&i._children.splice(t,1);const d=[...this.getLevelNodes(e)];d.splice(t,1),this._levels.set(e,d),this.updateIndexes(e),s._children&&s._children.forEach(e=>{this.removeNode(e._depth,e._index)})}}removeNodes(e,t,s){if(this.getLevelNodes(e))for(let i=t;i<s;i++)this.removeNode(e,0)}clearLevel(e){const t=this.getLevelNodes(e);if(t)for(let s=0;s<t.length;s++)this.removeNode(e,0)}replaceNode(e,t,s){this.removeNode(e,t);const d=new i(s[0],e,t);d._children=s.slice(1,s.length).map((t,s)=>new i(t,s,e+1)),this.insertNode(e,t,d)}insertNode(e,t,s){if(this.getLevelNodes(e)){const i=[...this.getLevelNodes(e)];i.splice(t,0,s),this._levels.set(e,i)}else this._levels.set(e,[s]);s._children&&s._children.forEach(e=>this.addNewNode(e._value,s))}addNewNode(e,t){const s=new i(e);s._children=[],this._root?t?(t._children.push(s),s._depth=t._depth+1,s._index=this.getLevelNodes(s._depth)?this.getLevelNodes(s._depth).length:t._children.length-1,this.insertNode(s._depth,s._index,s)):(this._root._children.push(s),s._depth=this._root._depth+1,s._index=this._root._children.length-1,this.insertNode(s._depth,s._index,s)):(s._index=s._depth=0,this._root=s,this.insertNode(s._depth,0,s))}updateIndexes(e){this.getLevelNodes(e).map((e,t)=>e._index=t)}}}]);